1) npm init
2) npm i -D parcel-bundler // Parcel это сборщик проекта по типу WebPack
3) Создали index.html , перед <body> подключили app.js
4) Создали app.js ,upload.js //upload.js пишется весь функционал плагина, app корень
5) В package-json , scriprts > serve => "parcel index.html"
6) Создаем в upload.js функцию которую export 

    export function upload(selector) {
      const input = document.querySelector(selector);

      const open = document.createElement('button');
      open.classList.add('btn');
      open.textContent = 'Открыть';

      input.insertAdjacentElement('afterend', open);
    }

7) Импортируем эту функцию в app.js :

    import { upload } from './upload.js'; 
    upload('#file'); // #file это id у index.html > input[file]

8) Убераем изначальный стиль у 

    input[type='file'] {
      display: none;
    }

9) Добавляем trigger на кнопку "Открыть", чтоб по ее клику был функционал input=file
    upload.js : 
      const triggerInput = () => input.click();
      open.addEventListener('click', triggerInput);

10) Добавляем возможность загрузить несколько файлов в input :
    upload.js = > export function upload(selector, options = {})
    Добавляем в function upload, вторым параметром пустой объект options

    app.js => upload('#file', {multi: true,});
    Передаем в импортируемую функцию, в объект options, добавляем метод multi = true

    upload.js => if (options.multi) {input.setAttribute('multiple', true)}
    Добавляем что если object options.multi === true, то выпонить setAttribute

    Там же добавляем : 
    input.addEventListener('change', changeHanlder);
    const changeHanlder = (event) => {console.log(event.target.files};

11) Задаем расширение файлов которое валидно для загрузки (.png, .jpg ...)
    app.js => upload('#file', {
                multi: true,
                accept: ['.png', '.jpg', '.jpeg', '.gif'],
              });
    Добавляем в object options, массив accept, со значениями расширений файлов

    upload.js => 
    if (options.accept && Array.isArray(options.accept)) {
      input.setAttribute('accept', options.accept.join(','));
    }

12) Добавляем функционал превью загружаемого image
    upload.js => 

    // Создаем в HTML div с классом preview, и помещаем в переменную
    const preview = document.createElement('div');
    preview.classList.add('preview');
    
    const changeHanlder = (event) => {
      if (!event.target.files) {
        return;
      }

      const files = Array.from(event.target.files); 
      // Преобраз files в Массив, что бы далее могли перебрать его с forEach


      preview.innerHTML = ''; // Обнуляем, что бы заново по новой все файлы грузить

      // Если тип файла в массиве Не равно != image, то заканчиваем это дело
      files.forEach((file) => {
        if (!file.type.match('image')) {
          return;
        }

        const reader = new FileReader();

         reader.onload = (ev) => {
        const src = ev.target.result;
        preview.insertAdjacentHTML(
          'afterbegin',
          `
         <div class="preview-image">
          <div class="preview-remove">&times;</div>
            <img src="${src}" alt="${file.name}" />
            <div class="preview-info">
            <span>${file.name}</span>
            ${file.size}
            </div>
        </div>
        `
        );
      };
        reader.readAsDataURL(file);
      });
    };

